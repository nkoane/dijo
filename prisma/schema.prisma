// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(uuid())
  username        String @unique
  hashed_password String
  roleId          Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role    UserRole      @relation(fields: [roleId], references: [id])
  Session UserSession[]
}

model UserSession {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

// @todo we need to change this to singular form
model UserRole {
  id   Int    @id @default(autoincrement())
  name String @unique
  User User[]
}

model Food {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String
  price       Float
  image       String       @default("")
  OrderItems  OrderItem[]
  category    FoodCategory @relation(fields: [categoryId], references: [id])
  categoryId  Int
  status      FoodStatus?  @relation(fields: [statusId], references: [id])
  statusId    Int?         @default(1)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model FoodStatus {
  id          Int      @id @default(autoincrement())
  state       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Food        Food[]
}

model FoodCategory {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  foods       Food[]
}

model Order {
  id       Int   @id @default(autoincrement())
  statusId Int
  cost     Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status     OrderStatus? @relation(fields: [statusId], references: [id])
  OrderItems OrderItem[]
}

model OrderStatus {
  id          Int      @id @default(autoincrement())
  state       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Order       Order[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  cost      Float
  food      Food     @relation(fields: [foodId], references: [id])
  foodId    Int
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
